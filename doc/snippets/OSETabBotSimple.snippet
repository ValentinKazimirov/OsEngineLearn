<?xml version="1.0" encoding="utf-8"?>
<CodeSnippets xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>OsEngine.BotPanelSimple</Title>
			<Shortcut>OSEBotPanelSimple</Shortcut>
			<Description>Template for your OsEngine.BotPanel.Simple</Description>
			<Author>Kazimirov Valentin</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
				<SnippetType>SurroundsWith</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>MyNamespace</ID>
					<ToolTip>Имя пространства имен</ToolTip>
					<Default>MyNamespace</Default>
				</Literal>
				<Literal>
					<ID>MyNameBot</ID>
					<ToolTip>Имя бота</ToolTip>
					<Default>MyNameBot</Default>
				</Literal>
				<Literal>
					<ID>Description</ID>
					<ToolTip>Описание бота</ToolTip>
					<Default>My super bot</Default>
				</Literal>
			</Declarations>
			<Imports>
				<Import>
					<Namespace>
						OsEngine.Entity
					    OsEngine.OsTrader.Panels.Attributes
						OsEngine.OsTrader.Panels.Taby
						OsEngine.OsTrader.Panels
					</Namespace>
				</Import>
			</Imports>

			<Code Language="csharp">
				<![CDATA[
// Необходимо для панельного бота				
using OsEngine.Entity;
using OsEngine.OsTrader.Panels.Attributes;
using OsEngine.OsTrader.Panels.Tab;
using OsEngine.OsTrader.Panels;
using OsEngine.Language;

/*
!!Это можно удалить когда скопируете имя бота и неймспейс!!

		$selected$$end$
*/

/*
Description
Важно! Описания кешируются. если не видите свое описание - удалите файл 
project\OsEngine\bin\Debug\BotsDescriprion.txt 
при старте создаст заново и описание появится

$Description$
*/

namespace OsEngine.Robots.$MyNamespace$
{
    [Bot("$MyNameBot$")] // Имя бота в списке ботов
	
    internal class $MyNameBot$ : BotPanel 
    {
       
        private BotTabSimple _tabSimple; // Закладка с данными бота

        // опциональные параметры бота
        private StrategyParameterBool isActive; 
        private StrategyParameterDecimal volumeParam; 
        private StrategyParameterInt pointsSL, pointsTP;

        // Обязательные переопределяемые функции 
		public override string GetNameStrategyType()
        {
            return "$MyNameBot$";
        }
 
        public override void ShowIndividualSettingsDialog()
        {

        }
				
        // Constructor
        public $MyNameBot$(string name, StartProgram startProgram) : base(name, startProgram)
        {
            Description = "$Description$";
            
            TabCreate(BotTabType.Simple);
            _tabSimple = TabsSimple[0];

            // Events события
            _tabSimple.CandleFinishedEvent += _tab_CandleFinishedEvent; // свечка сформировалась
            _tabSimple.PositionOpeningSuccesEvent += _tab_PositionOpeningSuccesEvent; // Позиция открылась успешно
            _tabSimple.MarketDepthUpdateEvent += _tab_MarketDepthUpdateEvent; // Изменился стакан
            _tabSimple.NewTickEvent += _tab_NewTickEvent; // Пришел новый тикет в рынке

            // Params Параметры
            isActive = CreateParameter(OsLocalization.ConvertToLocString(
            "Eng:Is Active_" +
            "Ru:Активно_"), true);
			// Параметры которые могут быть оптимизированы. Имя, значение по умолчанию, далее для оптимизатора: минимум, максимум, шаг
            volumeParam = CreateParameter("Volume", 1.0m, 1.0m, 10.0m, 1.0m);
            pointsSL = CreateParameter("Points to StopLost", 50, 10, 1000, 10);
            pointsTP = CreateParameter("Points to TakeProfit", 150, 10, 1000, 10);

        }

        // Follow opening positions событие позиция открыта
        private void _tab_PositionOpeningSuccesEvent(Position position)
        {
            trallingPosition(position, _tabSimple);
        }
        
		// Двигаем стопы за ценой
        private void trallingPosition(Position position, BotTabSimple tab)
        {
            decimal _newStopPrice = 0, _newProfitPrice = 0;
            if (position.Direction == Side.Buy)
            {
                _newStopPrice = tab.PriceBestAsk - pointsSL.ValueInt * tab.Securiti.PriceStep;
                if (_newStopPrice > position.StopOrderPrice)
                {
                    tab.CloseAtStop(position, _newStopPrice, _newStopPrice);
                }
                _newProfitPrice = tab.PriceBestBid + pointsTP.ValueInt * tab.Securiti.PriceStep;
                if (_newProfitPrice > position.ProfitOrderPrice)
                {
                    tab.CloseAtProfit(position, _newProfitPrice, _newProfitPrice);
                }
//                tab.CloseAtTrailingStop(position, position.EntryPrice + pointsSL.ValueInt * tab.Securiti.PriceStep, position.EntryPrice + pointsSL.ValueInt * tab.Securiti.PriceStep);
            }
            if (position.Direction == Side.Sell)
            {
                _newStopPrice = tab.PriceBestBid + pointsSL.ValueInt * tab.Securiti.PriceStep;
                if (_newStopPrice < position.StopOrderPrice)
                    tab.CloseAtStop(position, _newStopPrice, _newStopPrice);
                _newProfitPrice = tab.PriceBestAsk - pointsTP.ValueInt * tab.Securiti.PriceStep;
                if (_newProfitPrice < position.ProfitOrderPrice)
                {
                    tab.CloseAtProfit(position, _newProfitPrice, _newProfitPrice);
                }
                //  tab.CloseAtTrailingStop(position, position.EntryPrice + pointsSL.ValueInt * tab.Securiti.PriceStep, position.EntryPrice + pointsSL.ValueInt * tab.Securiti.PriceStep);
            }
        }
        
        // Logics for enter position
        private void _tab_CandleFinishedEvent(List<Candle> candels)
        {
            if (isActive.ValueBool == false) { return; }


            List<Position> positions = _tabSimple.PositionsOpenAll;

            if (positions.Count == 0)
            {
                // Открытых нет
            }
            else
            {
                foreach(var position in positions)// Перебираем каждую открытую
                {
                    trallingPosition(position, _tabSimple);
                }
            }
        }

        // По стакану сделок появилось событие
		private void _tab_MarketDepthUpdateEvent(MarketDepth marketDepth)
        {
            if (!_tabSimple.IsConnected)
            {
                return;
            }

        }

        // Получено новое событие по свечке
		private void _tab_NewTickEvent(Trade trade)
        {
            if (!_tabSimple.IsConnected)
            {
                return;
            }
			// Тут пишите логику бота при поступлении события изменение цены
        }

    }
}

]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>
